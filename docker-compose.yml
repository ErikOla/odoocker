services:
  odoo:
    build:
      context: ./
      dockerfile: ./odoo/Dockerfile
      args:
        - ODOO_TAG
        - ODOO_RC
        - ROOT_PATH
        - ENTERPRISE_USER
        - ENTERPRISE_ACCESS_TOKEN
        - ENTERPRISE_ADDONS
        - GITHUB_USER
        - GITHUB_ACCESS_TOKEN
        - THIRD_PARTY_ADDONS
        - LOG_PATH
        - USE_REDIS
        - USE_S3
        - USE_SENTRY
    tty: true
    shm_size: 1gb
    volumes:
      - odoo-data:${DATA_DIR}
      - ./odoo/extra-addons:${EXTRA_ADDONS}
      - ./odoo/custom-addons:${CUSTOM_ADDONS}
      - ./odoo/entrypoint.sh:/entrypoint.sh
    environment:
      - HOST=${DB_HOST}
      - PORT=${DB_PORT}
      - USER=${DB_USER}
      - PASSWORD=${DB_PASSWORD}
      - ODOO_TAG
      - ODOO_RC
      - USE_REDIS
      - USE_S3
      - USE_SENTRY
      - THIRD_PARTY_ADDONS
      - ODOO_SESSION_REDIS
      - ODOO_SESSION_REDIS_HOST
      - ODOO_SESSION_REDIS_PORT
      - ODOO_SESSION_REDIS_PASSWORD
      - ODOO_SESSION_REDIS_URL
      - ODOO_SESSION_REDIS_PREFIX
      - ODOO_SESSION_REDIS_SENTINEL_MASTER_NAME
      - ODOO_SESSION_REDIS_SENTINEL_HOST
      - ODOO_SESSION_REDIS_SENTINEL_PORT
      - ODOO_SESSION_REDIS_EXPIRATION
      - ODOO_SESSION_REDIS_EXPIRATION_ANONYMOUS
      - AWS_HOST
      - AWS_REGION
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_BUCKETNAME
    networks:
      - internal
    profiles: [$ODOO_PROFILES]

  postgres:
    build: 
      context: ./
      dockerfile: ./postgres/Dockerfile
      args:
        - POSTGRES_TAG
    tty: true
    shm_size: 1gb
    volumes:
      - pg-data:${PGDATA}
      - ./postgres/entrypoint.sh:/docker-entrypoint-initdb.d/entrypoint.sh
    environment:
      - POSTGRES_DB
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - PGDATA
      - DB_USER
      - DB_TEMPLATE
      - UNACCENT_TEMPLATE
      - PGADMING_DB_NAME
      - PGADMING_DB_USER
      - PGADMIN_DB_PASSWORD
    networks:
      - internal
    profiles: [$POSTGRES_PROFILES]

  nginx:
    image: nginx:${NGINX_TAG}
    depends_on:
      - odoo
    tty: true
    expose:
      - 80/tcp
    shm_size: 1gb
    volumes:
      - ./nginx/nginx.conf:${NGINX_CONF}
      - ./nginx/default.conf:${NGINX_DEFAULT_CONF}
    environment:
      - VIRTUAL_HOST
      - LETSENCRYPT_HOST
      - LETSENCRYPT_EMAIL
      - CORS_ALLOWED_DOMAIN
    networks:
      - internal
    profiles: [$NGINX_PROFILES]

  nginx-proxy:
    image: nginxproxy/nginx-proxy:${NGINX_PROXY_TAG}
    depends_on:
      - nginx
    tty: true
    shm_size: 1gb
    volumes:
      - ./nginx-proxy/nginx.conf:${NGINX_CONF}
      - ./nginx-proxy/cors.conf:${NGINX_PROXY_CORS_CONF}
      - html:${NGINX_HTML}
      - vhost:${NGINX_VHOST}
      - certs:${NGINX_CERTS}:ro
      - ${DOCKER_SOCK}:${TEMP_DOCKER_SOCK}:ro
    environment:
      - TRUST_DOWNSTREAM_PROXY
      - CORS_ALLOWED_DOMAIN
    networks:
      - internal
    profiles: [$NGINX_PROXY_PROFILES]

  traefik:
    container_name: traefik
    image: "traefik:${TRAEFIK_TAG}"
    networks:
      - internal
    command:
      - --api.dashboard=true
      - --api.insecure=false
      - --api.debug=true
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --providers.docker
      - --log.level=INFO
      - --accesslog.filepath=/var/log/traefik/access.log
      - --certificatesresolvers.leresolver.acme.httpchallenge=true
      - --certificatesresolvers.leresolver.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.leresolver.acme.email=xxxxxx@yourdomain.tld #Set your email address here, is for the generation of SSL certificates with Let's Encrypt. 
      - --certificatesresolvers.leresolver.acme.storage=/acme.json
        # - --certificatesresolvers.leresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
      - --serversTransport.insecureSkipVerify=true
    tty: true
    shm_size: 1gb
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./acme.json:/acme.json"
      - traefik_logs:/var/log/traefik
    labels:
      - "traefik.enable=true"

      # Catch all HTTP trafic and redirect it to HTTPS
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

      # Traefik Dashboard route
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.yourdomain.tld`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=leresolver"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
    profiles: [$TRAEFIK_PROFILES]


  letsencrypt:
    image: nginxproxy/acme-companion:${ACME_COMPANION_TAG}
    depends_on:
      - nginx-proxy
    volumes_from:
      - nginx-proxy:rw
    volumes:
      - certs:${NGINX_CERTS}:rw
      - acme:${NGINX_ACME}
      - ${DOCKER_SOCK}:${DOCKER_SOCK}:ro
    environment:
      - ACME_CA_URI
      - CERTS_UPDATE_INTERVAL
      - DEFAULT_EMAIL
    networks:
      - internal
    profiles: [$ACME_COMPANION_PROFILES]

  redis:
    image: eqalpha/keydb:${KEYDB_TAG}
    platform: linux/amd64
    ports:
      - ${KEYDB_PORT}:${KEYDB_PORT}
    volumes:
      - redis-data:${KEYDB_DATA}
    networks:
      - internal
    profiles: [$KEYDB_PROFILES]

  s3:
    image: minio/minio:${MINIO_TAG}
    environment:
      - MINIO_ROOT_USER
      - MINIO_ROOT_PASSWORD
      - MINIO_BROWSER_REDIRECT_URL
      - VIRTUAL_HOST=${MINIO_VIRTUAL_HOST}
      - VIRTUAL_PORT=${MINIO_CONSOLE_PORT}
    command: server ${MINIO_DATA} --console-address ":${MINIO_CONSOLE_PORT}"
    shm_size: 1gb
    volumes:
      - s3-data:${MINIO_DATA}
    ports:
      - ${MINIO_API_PORT}:${MINIO_API_PORT}
      - ${MINIO_CONSOLE_PORT}:${MINIO_CONSOLE_PORT}
    networks:
      - internal
    profiles: [$MINIO_PROFILES]

  pgadmin:
    build:
      context: ./
      dockerfile: ./pgadmin/Dockerfile
      args:
        - PGADMIN_TAG
    depends_on:
      - nginx-proxy
    expose:
      - 80
    shm_size: 1gb
    volumes:
      - pgadmin-data:${PGADMIN_DATA}
    environment:
      - PGADMIN_DEFAULT_EMAIL
      - PGADMIN_DEFAULT_PASSWORD
      - VIRTUAL_HOST=${PGADMIN_VIRTUAL_HOST}
      - LETSENCRYPT_HOST=${PGADMIN_LETSENCRYPT_HOST}
      - LETSENCRYPT_EMAIL=${PGADMIN_LETSENCRYPT_EMAIL}
      - PGADMIN_CONFIG_APP_NAME
      - PGADMIN_CONFIG_CONFIG_DATABASE_CONNECTION_POOL_SIZE
      - PGADMIN_CONFIG_SERVER_MODE
      - PGADMIN_CONFIG_DEFAULT_SERVER
      - PGADMIN_CONFIG_DEFAULT_SERVER_PORT
      - PGADMIN_CONFIG_PASSWORD_LENGTH_MIN
      - PGADMIN_CONFIG_MAX_SESSION_IDLE_TIME
      - PGADMIN_CONFIG_CONFIG_DATABASE_URI
      - PGADMIN_CONFIG_ALLOW_SAVE_PASSWORD
      - PGADMIN_CONFIG_MAX_QUERY_HIST_STORED
      - PGADMIN_CONFIG_MAIL_SERVER
      - PGADMIN_CONFIG_MAIL_PORT
      - PGADMIN_CONFIG_MAIL_USE_SSL
      - PGADMIN_CONFIG_MAIL_USE_TLS
      - PGADMIN_CONFIG_MAIL_USERNAME
      - PGADMIN_CONFIG_MAIL_PASSWORD
      - PGADMIN_CONFIG_MAIL_DEBUG
      - PGADMIN_CONFIG_SECURITY_EMAIL_SENDER
      - PGADMIN_CONFIG_ALLOW_SAVE_TUNNEL_PASSWORD
      - PGADMIN_CONFIG_MAX_LOGIN_ATTEMPTS
    networks:
      - internal
    profiles: [$PGADMIN_PROFILES]

volumes:
  odoo-data:
  pg-data:
  redis-data:
  s3-data:
  pgadmin-data:
  html:
  vhost:
  certs:
  acme:
  traefik_logs:

networks:
  internal:
    driver: bridge
